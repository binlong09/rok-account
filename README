# Governor Tracker Discord Bot

## Description

A Discord bot for tracking and managing governor accounts in strategy games, using PostgreSQL for data storage and Sequelize as the ORM.

## Features

-   Add new governors
-   Link main and farm accounts
-   Retrieve governor statistics
-   Scan and store historical account data

## Prerequisites

-   Node.js (v16+)
-   PostgreSQL
-   Discord Bot Token

## Setup

### 1. Clone the Repository

```bash
git clone https://github.com/yourusername/governor-tracker-bot.git
cd governor-tracker-bot
```

### 2. Install Dependencies

```bash
npm install
```

### 3. Configure Environment

1. Copy `.env.example` to `.env`
2. Fill in your Discord bot token and database credentials

```bash
cp .env.example .env
```

### 4. Setup Database

1. Create a PostgreSQL database
2. Update database connection details in `.env`

### 5. Run Migrations

```bash
npm run migrate
```

### 6. Start the Bot

```bash
npm start
```

# Governor Tracker Bot - Docker Deployment with Supabase

## Prerequisites

-   Raspberry Pi 4 (64-bit)
-   Docker
-   Docker Compose
-   Supabase Account
-   Git

## Supabase Setup

1. Create a Supabase project
2. Go to Project Settings > Database
3. Note down:
    - Host
    - Port (default 5432)
    - Database Name (usually 'postgres')
    - Database User
    - Database Password

## Deployment Steps

### 1. Install Docker and Docker Compose

```bash
# Update system
sudo apt update
sudo apt upgrade -y

# Install Docker
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh

# Install Docker Compose
sudo apt-get install docker-compose -y

# Add your user to docker group (optional)
sudo usermod -aG docker $USER
```

### 2. Clone the Repository

```bash
git clone https://github.com/yourusername/governor-tracker-bot.git
cd governor-tracker-bot
```

### 3. Configure Environment

Create a `.env` file with your Supabase details:

```
# Discord Bot Configuration
DISCORD_BOT_TOKEN=your_discord_bot_token_here

# Supabase PostgreSQL Configuration
SUPABASE_DB_HOST=your-project.supabase.co
SUPABASE_DB_PORT=5432
SUPABASE_DB_NAME=postgres
SUPABASE_DB_USER=postgres
SUPABASE_DB_PASSWORD=your_supabase_db_password
```

### 4. Build and Run

```bash
# Build the container
docker-compose build

# Start the container
docker-compose up -d
```

### 5. Database Migrations

```bash
# Run migrations inside the bot container
docker-compose exec bot npm run migrate
```

## Maintenance Commands

```bash
# View logs
docker-compose logs -f bot

# Stop the application
docker-compose down

# Update the application
git pull
docker-compose build
docker-compose up -d
```

## Supabase Considerations

-   Ensure your Supabase project's network allows connections from your deployment
-   Use strong, unique passwords
-   Consider IP restrictions in Supabase settings
-   Monitor connection limits and performance

## Troubleshooting

-   Verify Supabase connection details
-   Check Docker logs for connection issues
-   Ensure firewall and network settings allow connections
-   Verify Discord bot token and permissions
